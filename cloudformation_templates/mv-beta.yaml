AWSTemplateFormatVersion: 2010-09-09
Description: Stack to support the matchVote web app

Parameters:
  ImageId:
    Description: AMI Image to use for instances
    Type: String
  KeyName:
    Description: Key for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  IpRangeAllowedForSSH:
    Description: The IP to allow for connecting by SSH
    Type: String
  DBName:
    Description: Name of database
    Type: String
  DBPort:
    Description: Port on which the database server is running
    Type: String
  DBUsername:
    Description: Username for master user in database
    Type: String
  DBPassword:
    Description: Password for master user in database
    Type: String
  MatchvoteWebServerPort:
    Description: Port in which to bind container web server
    Type: String
  ContainerEnvironment:
    Description: Environment setting in which container will run
    Type: String
  AwsRegion:
    Description: Region in which instance resides
    Type: String
  ProfilePicBucket:
    Description: Bucket in which profile pictures are uploaded
    Type: String
  SecretKeyBase:
    Description: Key base used to verify signed cookies
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable
  RoutePublicSubnetToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  MatchvoteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Firewall for public web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref IpRangeAllowedForSSH
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  DogoodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Firewall for Mrs Silence Dogood
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref IpRangeAllowedForSSH
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Collection of subnets for RDS instance to use
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Firewall for MV RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MatchvoteSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref DogoodSecurityGroup
  MatchvoteDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5  # GB
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: matchvote-db
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  MatchvoteAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref MatchvoteLaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} matchVote ECS Instance
          PropagateAtLaunch: true
  MatchvoteLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ContainerInstanceProfile
      SecurityGroups:
        - !Ref MatchvoteSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          sudo yum install postgresql95.x86_64 aws-cfn-bootstrap
          cat <<'EOF' >> /etc/ecs/ecs.config
          ECS_CLUSTER=${Cluster}
          ECS_INSTANCE_ATTRIBUTES={"container_type":"matchvote"}
          EOF
  DogoodInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ContainerInstanceProfile
      SubnetId: !Ref PublicSubnet  # NAT Gateway will need to be used if subnet is private
      SecurityGroupIds:
        - !GetAtt DogoodSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Mrs-Silence-Dogood ECS Instance

  ContainerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: ContainerInstanceProfile
      Roles:
        - !Ref EcsInstanceRole
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-${AWS::Region}-ecs-instance-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
  MatchvoteContainerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-${AWS::Region}-matchvote-container-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: matchvote-s3-profile-pic-bucket-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: !Sub arn:aws:s3:::${ProfilePicBucket}/*
                Action:
                  - "s3:*"

  MatchvoteRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: matchvote

  MatchvoteService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 0
      ServiceName: matchvote
      TaskDefinition: !Ref MatchvoteTaskDefinition
      PlacementConstraints:
        - Type: memberOf
          Expression: attribute:container_type == matchvote
  MatchvoteTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-matchvote
      TaskRoleArn: !GetAtt MatchvoteContainerRole.Arn
      ContainerDefinitions:
        - Name: matchvote
          Essential: true
          Memory: 495
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/matchvote:latest
          PortMappings:
            - ContainerPort: !Ref MatchvoteWebServerPort
              HostPort: 80  # remove this with the addition of an ALB
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub awslogs-${AWS::StackName}-matchvote
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: DB_HOST
              Value: !GetAtt MatchvoteDatabase.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_PORT
              Value: !Ref DBPort
            - Name: DB_USER
              Value: !Ref DBUsername
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: WEB_SERVER_PORT
              Value: !Ref MatchvoteWebServerPort
            - Name: RAILS_ENV
              Value: !Ref ContainerEnvironment
            - Name: AWS_REGION
              Value: !Ref AwsRegion
            - Name: MV_PROFILE_PIC_BUCKET
              Value: !Ref ProfilePicBucket
            - Name: SECRET_KEY_BASE
              Value: !Ref SecretKeyBase
  MatchvoteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub awslogs-${AWS::StackName}-matchvote
      RetentionInDays: 3

  DogoodService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 0
      ServiceName: mrs-silence-dogood
      TaskDefinition: !Ref DogoodTaskDefinition
  DogoodTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-dogood
      ContainerDefinitions:
        - Name: mrs-silence-dogood
          Essential: true
          Memory: 1000
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/dogood:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub awslogs-${AWS::StackName}-dogood
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: DB_HOST
              Value: !GetAtt MatchvoteDatabase.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_PORT
              Value: !Ref DBPort
            - Name: DB_USER
              Value: !Ref DBUsername
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: FEEDER_ENV
              Value: !Ref ContainerEnvironment
            - Name: AWS_REGION
              Value: !Ref AwsRegion
  DogoodLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub awslogs-${AWS::StackName}-dogood
      RetentionInDays: 3

Outputs:
  DBHost:
    Value: !GetAtt MatchvoteDatabase.Endpoint.Address
